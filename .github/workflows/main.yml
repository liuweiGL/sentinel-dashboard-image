name: Sentinel Dashboard → Aliyun Container Registry

# 触发方式：1. 每天凌晨定时执行 2. 手动触发
on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      ########################################################################
      # 步骤1：获取 alibaba/Sentinel 最新 Release 中的 sentinel-dashboard JAR 包
      ########################################################################
      - name: Get latest Sentinel Release assets
        id: get_latest_release
        run: |
          # 1. 调用GitHub API获取alibaba/Sentinel最新Release信息
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/alibaba/Sentinel/releases/latest")
          
          # 2. 过滤出 "sentinel-dashboard-${版本}.jar" 格式的JAR包下载链接
          DASHBOARD_JAR_URL=$(echo "$LATEST_RELEASE" | jq -r '
            .assets[] | 
            select(.name | test("^sentinel-dashboard-\\d+\\.\\d+\\.\\d+\\.jar$")) | 
            .browser_download_url
          ')
          
          # 3. 检查是否找到目标JAR包，未找到则终止流程
          if [ -z "$DASHBOARD_JAR_URL" ] || [ "$DASHBOARD_JAR_URL" = "null" ]; then
            echo "Error: 未找到 sentinel-dashboard-${版本}.jar 格式的JAR包"
            exit 1
          fi
          
          # 4. 输出JAR包URL和文件名
          DASHBOARD_JAR_NAME=$(basename "$DASHBOARD_JAR_URL")
          echo "DASHBOARD_JAR_URL=$DASHBOARD_JAR_URL" >> $GITHUB_OUTPUT
          echo "DASHBOARD_JAR_NAME=$DASHBOARD_JAR_NAME" >> $GITHUB_OUTPUT
          echo "找到目标JAR包：$DASHBOARD_JAR_NAME"

      ########################################################################
      # 步骤2：解析JAR包版本号（从文件名提取）
      ########################################################################
      - name: Extract version from JAR filename
        id: extract_version
        run: |
          # 从文件名提取版本号（如sentinel-dashboard-1.8.8.jar → 1.8.8）
          VERSION=$(echo "${{ steps.get_latest_release.outputs.DASHBOARD_JAR_NAME }}" | sed -E 's/^sentinel-dashboard-([0-9]+\.[0-9]+\.[0-9]+)\.jar$/\1/')
          
          # 验证版本号格式
          if ! echo "$VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "Error: 解析的版本号格式异常，版本号：$VERSION"
            exit 1
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "解析出版本号：$VERSION"

      ########################################################################
      # 步骤3：下载JAR包到本地
      ########################################################################
      - name: Download sentinel-dashboard JAR
        run: |
          mkdir -p ./sentinel-dashboard
          curl -L "${{ steps.get_latest_release.outputs.DASHBOARD_JAR_URL }}" -o ./sentinel-dashboard/sentinel-dashboard.jar
          if [ ! -s ./sentinel-dashboard/sentinel-dashboard.jar ]; then
            echo "Error: JAR包下载失败或文件为空"
            exit 1
          fi

      ########################################################################
      # 步骤4：创建Dockerfile
      ########################################################################
      - name: Create Dockerfile
        run: |
          cat > ./sentinel-dashboard/Dockerfile << EOF
          FROM openjdk:21-jdk-slim
          WORKDIR /app
          COPY sentinel-dashboard.jar /app/sentinel-dashboard.jar
          EXPOSE 8080
          # 启动命令中显示版本信息，方便日志排查
          ENTRYPOINT ["sh", "-c", "java -Dserver.port=8080 \$JVM_OPTS -jar /app/sentinel-dashboard.jar  \$0 \$@"]
          EOF

      ########################################################################
      # 步骤5：登录阿里云容器Registry
      ########################################################################
      - name: Login to Aliyun Container Registry
        uses: docker/login-action@v3
        with:
          registry: registry.cn-shanghai.aliyuncs.com
          username: ${{ secrets.ALIYUN_CR_USERNAME }}
          password: ${{ secrets.ALIYUN_CR_PASSWORD }}

      ########################################################################
      # 步骤6：构建并推送Docker镜像
      ########################################################################
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./sentinel-dashboard
          push: true
          tags: registry.cn-shanghai.aliyuncs.com/eastcoal-library/sentinel-dashboard:${{ steps.extract_version.outputs.VERSION }},registry.cn-shanghai.aliyuncs.com/eastcoal-library/sentinel-dashboard:latest
          build-args: SENTINEL_VERSION=${{ steps.extract_version.outputs.VERSION }}
